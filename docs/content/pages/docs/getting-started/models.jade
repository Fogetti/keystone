extends ../../../templates/layout/base

include ../../../templates/mixins/docsnav

block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			h2 Models
			
			p Before you can start your Keystone app, you'll need some data models.
			
			p We're going to start with the <code>User</code> model, which is special - we need it so that Keystone can do authentication and session management.
			
			p Create the following two files in the <code>/models</code> folder:
			
			.code-header
				h4 models/index.js
				p This is the script that includes your models. It doesn't need to export anything.
			pre: code.language-javascript
				| require('./users.js');
			
			.code-header
				h4 models/users.js
				p This script initialises the <code>User</code> model. It doesn't need to export anything, but the model <em>must</em> be registered with Keystone.
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Types = keystone.Field.Types;
				| 
				| var User = new keystone.List('User');
				| 
				| User.add({
				|     name: { type: Types.Name, required: true, index: true },
				|     email: { type: Types.Email, initial: true, required: true, index: true },
				|     password: { type: Types.Password, initial: true },
				|     canAccessKeystone: { type: Boolean, initial: true }
				| });
				| 
				| User.register();
			
			
			a(name="models_auth")
			h3 Authentication and Session Management
			
			p For Keystone to provide authentication and session management to your application, it needs to know a few things, which we've now told it.
			
			p To recap:
			ul.list
				li The option <code>user model</code> must be the name of the Model that Keystone should look in to find your users. If you use a different model name, be sure to set the option correctly.
				li If you want your application to support session management, set the <code>session</code> option to <strong>true</strong>. Loading sessions incurs a small overhead, so if your application doesn't need it you can turn it off.
				li Keystone has built-in views for signing in and out. To enable them, set the <code>auth</code> option to <strong>true</strong>. You can also implement custom signin and signout screens in your applications' views.
				li Sessions are persisted using an encrypted cookie storing the user's ID. Make sure you set the <code>cookie secret</code> option to a long, random string.
				li The user model must have a <code>canAccessKeystone</code> property (which can be a virtual method or a stored boolean) that says whether a user can access Keystone's Admin UI or not.
			
			h4 More on Data Models
			
			p For more information on how to set up your application's models, and the full documentation for lists and fields, see the <a href="/docs/data">database guide</a>.
			
			.simple-pager
				a(href='/docs/guides/getting-started').btn.btn-default.prev &larr; Starting
				a(href='/docs/guides/getting-started/routes-views').btn.btn-default.next Routes &amp; Views &rarr;

