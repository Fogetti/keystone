extends ../../../templates/layout/base

include ../../../templates/mixins/docsnav
	
block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			h2 Field Types
			
			
			a(name="field_boolean")
			h3 <code>Boolean</code>
			h4 <code class="data-type">Boolean</code> &mdash; Displayed as a checkbox in the Admin UI
			pre: code.language-javascript { type: Types.Boolean }
			
			
			a(name="field_text")
			h3 <code>Text</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI
			pre: code.language-javascript { type: Types.Text }
			
			
			a(name="field_textarea")
			h3 <code>Textarea</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a textarea field in the Admin UI
			pre: code.language-javascript { type: Types.Textarea }
			.options
				
				h5 Options
				p <code>height</code> <code class="data-type">Number</code> - the height of the field (in pixels)
			
			
			a(name="field_email")
			h3 <code>Email</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI
			p.note Input must look like a valid email address (can be blank unless field is required)
			pre: code.language-javascript { type: Types.Email, displayGravatar: true }
			.options
				
				h5 Options
				p <code>displayGravatar</code> <code class="data-type">Boolean</code> - whether to display a gravatar image in the Admin UI
				
				h5 Underscore methods:
				p <code>gravatarUrl(input, size, defaultImage, rating)</code> - generates a gravatar image request url
				pre: code.language-javascript
					| item.email = "demo@keystonejs.com";
					| item._.email.gravatarUrl(); // "//www.gravatar.com/avatar/74a0071e5f3a7107b570b7d4a1a7619d?s=80&d=identicon&r=g"
					| item._.email.gravatarUrl(200,'mm','r'); // "//www.gravatar.com/avatar/74a0071e5f3a7107b570b7d4a1a7619d?s=200&d=mm&r=r"
			
			
			a(name="field_url")
			h3 <code>Url</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI.
			pre: code.language-javascript { type: Types.Url }
			.options
				
				h5 Underscore methods:
				p <code>format()</code> - formats the stored value by stripping the leading protocol (if any)
				pre: code.language-javascript
					| item.url = "http://keystonejs.com";
					| item._.url.format(); // "keystonejs.com"
			
			
			a(name="field_html")
			h3 <code>Html</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field or WYSIWYG Editor in the Admin UI.
			pre: code.language-javascript { type: Types.Html, wysiwyg: true }
			.options
				
				h5 Options
				p <code>wysiwyg</code> <code class="data-type">Boolean</code> - whether to display a WYSIWYG editor in the Admin UI
				p <code>height</code> <code class="data-type">Number</code> - the height of the field (in pixels)
			
			
			a(name="field_date")
			h3 <code>Date</code>
			h4 <code class="data-type">Date</code> &mdash; Displayed as a date picker in the Admin UI
			p.note Input should either be a valid <strong>Date</strong>, or a string in the format <strong>YYYY-MM-DD</strong> (can be blank unless field is required)
			p.note To default Date fields to the current time, set the <code>default</code> option to <code class="default-value">Date.now</code>
			pre: code.language-javascript { type: Types.Date }
			.options
				
				h5 Options
				p <code>format</code> <code class="data-type">string</code> - the default format pattern to use, defaults to <code class="default-value">Do MMM YYYY</code>
				p See the <a href="http://momentjs.com/docs/#/displaying/format/" target="_blank">momentjs format docs</a> for information on the supported formats and options.
				
				h5 Underscore methods
				p <code>format(string)</code> - formats the stored value using <a href="http://momentjs.com" target="_blank">momentjs</a>
				p <code>moment()</code> - returns a <a href="http://momentjs.com" target="_blank">momentjs</a> object initialised with the value of the field
				p <code>parse(input, format, ...)</code> - parses input using <a href="http://momentjs.com" target="_blank">momentjs</a>, sets the field value and returns the moment object
				p See the <a href="http://momentjs.com/docs/#/parsing/" target="_blank">momentjs parse docs</a> for information on the supported formats and options for the <code>parse</code> method.
				pre: code.language-javascript
					| item.cretedDate = Date.now();
					| item._.createdDate.format(); // returns today's date using the default format string
					| item._.createdDate.parse('2013-12-04'); // returns a moment object with the parsed date
					| item._.createdDate.format('YYYY-MM-DD'); // returns '2013-12-04'
			
			a(name="field_datetime")
			h3 <code>Datetime</code>
			h4 <code class="data-type">Date</code> &mdash; Displayed as a date and time picker in the Admin UI
			p.note Input should either be a valid <strong>Date</strong>, or a string in the format <code class="default-value">YYYY-MM-DD</code> (can be blank unless field is required)
			p.note To default Date fields to the current time, set the <code>default</code> option to <code>Date.now</code>
			pre: code.language-javascript { type: Types.Date, default: Date.now }
			.options
				
				h5 Options:
				p <code>format</code> <code class="data-type">string</code> - the default format pattern to use, defaults to <code class="default-value">Do MMM YYYY hh:mm:ss a</code>
				p See the <a href="http://momentjs.com/docs/#/displaying/format/" target="_blank">momentjs format docs</a> for information on the supported formats and options.
				
				h5 Underscore methods:
				p <code>format(string)</code> - formats the stored value using <a href="http://momentjs.com" target="_blank">momentjs</a>
				p <code>moment()</code> - returns a <a href="http://momentjs.com" target="_blank">momentjs</a> object initialised with the value of the field
				p <code>parse(input, format, ...)</code> - parses input using <a href="http://momentjs.com" target="_blank">momentjs</a>, sets the field value and returns the moment object
				p See the <a href="http://momentjs.com/docs/#/parsing/" target="_blank">momentjs parse docs</a> for information on the supported formats and options for the <code>parse</code> method.
			
			
			a(name="field_key")
			h3 <code>Key</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a text field in the Admin UI
			p Automatically converts input to a valid key (no spaces or special characters). White space is replaced with a separator.
			pre: code.language-javascript { type: Types.Key }
			.options
				
				h5 Options
				p <code>separator</code> <code class="data-type">String</code> - the separator to use when replace white space in the input; defaults to <code class="default-value">-</code>
			
			
			a(name="field_number")
			h3 <code>Number</code>
			h4 <code class="data-type">Number</code> &mdash; Displayed as a number field in the Admin UI
			p Input should either be a valid <strong>Number</strong>, or a string that can be converted to a number (can be blank unless field is required)
			pre: code.language-javascript { type: Types.Number }
			.options
				
				h5 Underscore methods
				p <code>format(string)</code> - formats the stored value using <a href="http://numeraljs.com" target="_blank">numeraljs</a>.
				p Format string defaults to <code class="default-value">0,0[.][000000000000]</code>
			
			
			a(name="field_money")
			h3 <code>Money</code>
			h4 <code class="data-type">Number</code> &mdash; Displayed as a number field in the Admin UI
			p Input should either be a valid <strong>Number</strong>, or a string that can be converted to a number (leading symbols are allowed; can be blank unless field is required). Money fields do not understand currency.
			pre: code.language-javascript { type: Types.Money }
			.options
				
				h5 Underscore methods
				p <code>format(string)</code> - formats the stored value using <a href="http://numeraljs.com" target="_blank">numeraljs</a>.
				p Format string defaults to <code class="default-value">$0,0.00</code>
			
			
			a(name="field_select")
			h3 <code>Select</code>
			h4 <code class="data-type">String</code> or <code class="data-type">Number</code> &mdash; Displayed as a select field in the Admin UI
			pre: code.language-javascript { type: Types.Select, options: 'first, second, third' }
			.options
				
				h5 Options
				p <code>numeric</code> <code class="data-type">Boolean</code> when <code class="default-value">true</code>, causes the value of the field to be stored as a <code class="data-type">Number</code> instead of a <code class="data-type">String</code>
				pre: code.language-javascript { type: Types.Select, numeric: true, options: [{ value: 1, label: 'One' }, { value: 2, label: 'Two' }] }
				p <code>options</code> <code class="data-type">String</code> or <code class="data-type">Array</code> - the options for the select field
				p Option values can be provided as a comma-delimited list <code class="data-type">String</code> of values, in which the string is split into an <code class="data-type">Array</code>.
				p For an <code class="data-type">Array</code> of options, each option should be either a
				ul
					li <code class="data-type">String</code> representing the <code>value</code> of the option; the <code>label</code> is automatically generated
					li <code class="data-type">Object</code> with <code>value</code> and <code>label</code> <code class="data-type">String</code> properties
				p You can mix <code class="data-type">String</code> and <code class="data-type">Object</code> items in the <code>options</code> <code class="data-type">Array</code>:
				pre: code.language-javascript { type: Types.Select, options: ['first', 'second', { value: 'third', label: 'The third one' }] }
				p <code class="data-type">Object</code> options can have additional properties which are accessible when the current options data, or fields options are retrieved.
				pre: code.language-javascript
					| { type: Types.Select, options: [
					|     { value: 'first', label: 'The first option', custom: 'value' },
					|     { value: 'second', label: 'Second' }
					| ]}
				
				h5 Properties
				p <code>ops</code> <code class="data-type">Array</code> - the field <strong>options</strong> array
				p <code>values</code> <code class="data-type">Array</code> - all <code>option.value</code> properties
				p <code>labels</code> <code class="data-type">Object</code> - app <code>option.label</code> properties, keyed by <code>option.value</code>
				p <code>map</code> <code class="data-type">Object</code> - map of options, keyed by <code>option.value</code>
				
				h5 Schema
				p The value of the current option will be stored at <code>{path}</code>. In addition, these virtuals are provided:
				p <code>pathLabel</code> <code class="data-type">String</code> - the label of the currently selected <strong>option</strong>
				p <code>pathData</code> <code class="data-type">Object</code> - the currently selected <strong>option</strong>, including any custom properties
				p <code>pathOptions</code> <code class="data-type">Array</code> - the field <strong>options</strong> array
				p <code>pathOptionsMap</code> <code class="data-type">Object</code> - map of options, keyed by <code>option.value</code>
				
				h5 Underscore methods:
				p <code>pluck(property, default)</code> - returns <code>property</code> value of the currently selected <strong>option</strong>, or <code>default</code>. Useful in conjunction with custom properties for options.
				
				pre: code.language-javascript
					| MyList.add({ state: { type: Types.Select, options: 'draft, published, archived', default: 'draft' });
					| 
					| MyList.fields.state.values == 'draft,published,archived';
					| MyList.fields.state.labels == { draft: 'Draft', published: 'Published', archived: 'Archived' };
					| MyList.fields.state.ops == [
					|     { value: 'draft', label: 'Draft' },
					|     { value: 'published', label: 'Published' },
					|     { value: 'archived', label: 'Archived' }
					| ];
					| MyList.fields.state.map == {
					|     draft: { value: 'draft', label: 'Draft' },
					|     published: { value: 'published', label: 'Published' },
					|     archived: { value: 'archived', label: 'Archived' }
					| };
					| 
					| var item = new MyList.model();
					| item.state == 'draft';
					| item.stateLabel == 'Draft';
					| item.stateData == { value: 'draft', label: 'Draft' };
					| item.stateOptions == MyList.fields.state.ops;
					| item.stateOptionsMap == MyList.fields.state.map;
			
			
			a(name="field_markdown")
			h3 <code>Markdown</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as a textarea field in the Admin UI
			pre: code.language-javascript { type: Types.Markdown }
			.options
				
				h5 Schema
				p The markdown field will automatically convert markdown to html when the <code>md</code> property is changed, via a setter on the <code>md</code> path.
				p <code>md</code> <code class="data-type">String</code> - source markdown text
				p <code>html</code> <code class="data-type">String</code> - generated html code
				pre: code.language-javascript
					| Page.add({ content: Types.Markdown });
					| 
					| var page = new Page.model();
					| page.content.md = "# Hello World";
					| page.content.html == "&lt;h1&gt;Hello World&lt;/h1&gt;";
					| 
					| // or...
					| 
					| Page.fields.content.updateItem(page, "* list item");
					| page.fields.content.format(page) == "&lt;ul&gt;&lt;li&gt;list item&lt;/ul&gt;&lt;/li&gt;";
			
			a(name="field_name")
			h3 <code>Name</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as <strong>firstname</strong> <strong>lastname</strong> fields in the Admin UI
			pre: code.language-javascript { type: Types.Name }
			.options
				
				h5 Schema
				p The name field adds <code>first</code> and <code>last</code> <code class="data-type">String</code> paths to the schema, as well as a <code>full</code> virtual getter and setter.
				p <code>first</code> <code class="data-type">String</code> - first name
				p <code>last</code> <code class="data-type">String</code> - last name
				
				h5 Virtuals
				p <code>full</code> <code class="data-type">String</code> - first and last name, concatenated with a space (if both have a value)
				p The <code>name.full</code> setter splits input at the first space.
			
			
			a(name="field_password")
			h3 <code>Password</code>
			h4 <code class="data-type">String</code> &mdash; Displayed as a password field in the Admin UI, with a 'change' button.
			
			p Passwords are automatically encrypted with bcrypt, and expose a method to compare a string to the encrypted hash.
			p.note The encryption happens with a <strong>pre-save hook</strong> added to the <strong>schema</strong>, so passwords set will not be encrypted until an item has been saved to the database.
			pre: code.language-javascript { type: Types.Password }
			.options
				
				h5 Options
				p <code>workFactor</code> <code class="data-type">Number</code> - the bcrypt workfactor to use when generating the hash, higher numbers are slower but more secure (defaults to <code class="default-value">10</code>)
				
				h5 Underscore methods
				p <code>compare(input)</code> <code class="data-type">Boolean</code> - compares the input against the encrypted hash, returns <code class="default-value">true</code> if they match or <code class="default-value">false</code> if they don't
				
				h5 Special paths
				p <code>{path}_compare</code> - when provided to the <strong>updateHandler</strong>, it will be checked against <code>{path}</code> and validation will fail if they don't match.
			
			
			a(name="field_location")
			h3 <code>Location</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as a combination of fields in the Admin UI
			p Contains a standard set of strings for storing an address, and a longitude / latitude point with a <code class="data-type">2dsphere</code> index.
			p Also provides autocomplete functionality using Google's Places API (requires a Google Maps API Key to be provided, must only be used in accordance with Google's terms of service).
			p See the <a href="/docs/configuration#google">Google configuration documentation</a> for details on how to set up Google Maps in KeystoneJS.
			pre: code.language-javascript { type: Types.Location }
			p.note Note: the schema paths are based on Australian address formats, and should be updated to be more appropriate for other international formats. If you have feedback on how the structure should be internationalised, please open a ticket.
			.options
				
				h5 Schema
				p <code>name</code> <code class="data-type">String</code> - building name
				p <code>number</code> <code class="data-type">String</code> - unit or shop number
				p <code>street1</code> <code class="data-type">String</code> - street address
				p <code>street2</code> <code class="data-type">String</code> - street address line 2
				p <code>suburb</code> <code class="data-type">String</code>
				p <code>state</code> <code class="data-type">String</code>
				p <code>postcode</code> <code class="data-type">String</code>
				p <code>country</code> <code class="data-type">String</code>
				p <code>geo</code> <code class="data-type">Array</code> <code class="default-value">longitude, latitude</code>
				p.note <strong>Important</strong>: as per the MongoDB convention, the order for the <strong>geo</strong> array must be <code class="default-value">lng, lat</code> which is the opposite of the order used by Google's API.
				
				h5 Underscore methods
				p <code>googleLookup(region, update, callback)</code> - autodetect the full address and lng, lat from the stored value.
				ul
					li <code>region</code> <code class="data-type">String</code> is passed to the Places API for regional biasing and filtering.
					li <code>update</code> <code class="data-type">String</code> passing <code class="default-value">"overwrite"</code> will completely overwrite existing data with the result. <code class="default-value">true</code> will set blank properties on the field with the result.
					li <code>callback(err, location, result)</code> - is passed the parsed <strong>location</strong> object, and the raw <strong>result</strong> from Google.
				
				p Internal status codes mimic the Google API status codes. See <a href="https://developers.google.com/maps/documentation/geocoding/" target="_blank">https://developers.google.com/maps/documentation/geocoding/</a> for more information.
				p Use of the Google Geocoding API is subject to a query limit of 2,500 geolocation requests per day, except with an enterprise license.
				p The Geocoding API may only be used in conjunction with a Google map; geocoding results without displaying them on a map is prohibited. Please make sure your Keystone app complies with the Google Maps API License.
			
			a(name="field_cloudinaryimage")
			h3 <code>CloudinaryImage</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as an image upload field in the Admin UI
			p Automatically manages images stored in <a href="http://cloudinary.com" target="_blank">Cloudinary</a>, including uploading, resizing and deleting.
			p See the <a href="/docs/configuration#cloudinary">Cloudinary configuration documentation</a> for details on how to set up Cloudinary in KeystoneJS.
			pre: code.language-javascript { type: Types.CloudinaryImage }
			.options
				
				h5 Schema
				p <code>public_id</code> <code class="data-type">String</code>
				p <code>version</code> <code class="data-type">Number</code>
				p <code>signature</code> <code class="data-type">String</code>
				p <code>format</code> <code class="data-type">String</code>
				p <code>resource_type</code> <code class="data-type">String</code>
				p <code>url</code> <code class="data-type">String</code>
				p <code>width</code> <code class="data-type">Number</code>
				p <code>height</code> <code class="data-type">Number</code>
				p <code>secure_url</code> <code class="data-type">String</code>
				
				h5 Virtuals
				<code>exists</code> <code class="data-type">Boolean</code> - whether there is a stored image
				
				h5 Special paths
				p <code>{path}_upload</code> - when a <code class="data-type">file</code> is provided to the <strong>updateHandler</strong>, it will be uploaded to cloudinary and the details will be stored in the field.
				//- TODO: Document {path}_action
				
				h5 Underscore methods
				p <code>src(options)</code> <code class="data-type">String</code> - returns the url of the image, accepts all options cloudinary supports
				p <code>tag(options)</code> <code class="data-type">String</code> - returns an `<img>` tag
				p <code>scale(width, height, options)</code> <code class="data-type">String</code> - scales the image to fit the exact width and height, retaining aspect ratio
				p <code>fit(width, height, options)</code> <code class="data-type">String</code> - scales the image to fit within the specified width and height, retaining aspect ratio
				p <code>lfit(width, height, options)</code> <code class="data-type">String</code> - scales the image to fit within the specified width and height, retaining aspect ratio (without exceeding the original dimensions)
				p <code>limit(width, height, options)</code> <code class="data-type">String</code> - scales the image (down only) to fit within the specified width and height, retaining aspect ratio
				p <code>fill(width, height, options)</code> <code class="data-type">String</code> - scales the image to fill the specified width and height
				p <code>crop(width, height, options)</code> <code class="data-type">String</code> - crops the image to fill the specified width and height
				p <code>pad(width, height, options)</code> <code class="data-type">String</code> - pads the image to fill the specified width and height
				p <code>lpad(width, height, options)</code> <code class="data-type">String</code> - pads the image to fill the specified width and height (without exceeding the original dimensions)
				p <code>thumbnail(width, height, options)</code> <code class="data-type">String</code> - crops the image to fill the specified width and height
				p In all methods, <code class="default-value">options</code> is an optional <code class="data-type">Object</code>. See <a href="http://cloudinary.com/documentation/image_transformations" target="_blank">Cloudinary's Transformation Documentation</a> for more information on the supported options and transformations.
				//- TODO: Usage Examples
			
			a(name="field_cloudinaryimages")
			h3 <code>CloudinaryImages</code>
			h4 <code class="data-type">Array</code> &mdash; Displayed as a series of images, and an upload field in the Admin UI
			p Stores multiple images in a array as a nested <code class="data-type">Schema</code>, each of which expose the same methods as the <code class="data-type">cloudinaryimage</code> field.
			pre: code.language-javascript { type: Types.CloudinaryImages }
			//- TODO: Usage Examples
			
			
			a(name="field_s3file")
			h3 <code>S3 File</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as an file upload field in the Admin UI
			p Automatically manages files stored in <a href="http://aws.amazon.com/s3" target="_blank">Amazon S3</a>, including uploading and deleting.
			pre: code.language-javascript { type: Types.S3File }
			.options
				
				h5 Options
				p <code>s3path</code> <code class="data-type">String</code> - the path to store uploaded files under in the S3 bucket
				p <code>datePrefix</code> <code class="data-type">String</code> - if set, prefixes the file name with the current date in this format (see <a href="http://momentjs.com" target="_blank">moment.js</a> for format options)
				p <code>allowedTypes</code> <code class="data-type">Array</code> of <code class="data-type">String</code> - optional white-list of allowed mime types for uploaded files
				
				h5 Schema
				p <code>filename</code> <code class="data-type">String</code>
				p <code>type</code> <code class="data-type">String</code>
				p <code>filesize</code> <code class="data-type">Number</code>
				p <code>url</code> <code class="data-type">String</code>
				
				h5 Virtuals
				<code>exists</code> <code class="data-type">Boolean</code> - whether there is a stored file
				
				h5 Special paths
				p <code>{path}_upload</code> - when a <code class="data-type">file</code> is provided to the <strong>updateHandler</strong>, it will be uploaded to s3 and the details will be stored in the field.
				//- TODO: Document {path}_action
			
				h5 Underscore methods
				p <code>uploadFile(file, update, callback)</code> - uploads a file to the s3 bucket, stores the details in the field and provides the file data to the callback.
				ul
					li <code>file</code> <code class="data-type">File</code> should be a file as provided by express when a file is uploaded, i.e. <code class="default-value">req.files.path</code>
					li <code>update</code> <code class="data-type">Boolean</code> whether to update the field with the details of the file after upload completes
					li <code>callback(err, fileData)</code> - is passed the raw object that will be stored in the field (see schema above)
						
			
			a(name="field_embedly")
			h3 <code>Embedly</code>
			h4 <code class="data-type">Object</code> &mdash; Displayed as read-only data in the Admin UI
			p Automatically retrieves data from the <a href="http://embed.ly" target="_blank">Embedly</a> API about the value of another field (specified with the <code>from</code> option).
			p It stores the retrieved data (which includes the provider, media type, full URL, HTML embed code, width, height, thumbnail picture and more).
			p The api call to retrieve the data is implemented as a pre-save hook, and is only triggered if the <strong>from path</strong> value has changed.
			p See the <a href="/docs/configuration#embedly">Embed.ly configuration documentation</a> for details on how to set up Embed.ly in KeystoneJS.
			pre: code.language-javascript { type: Types.Embedly, from: 'path' }
			.options
				
				h5 Options
				p <code>from</code> <code class="data-type">String</code> - another path in the Schema (must contin a <code class="data-type">String</code> value) that will be passed to the Embedly API.
				p <code>options</code> <code class="data-type">Object</code> (optional) - passed as arguments to the embedly API along with the <code>from</code> field value
				p See <a href="http://embed.ly/docs/embed/api/endpoints/1/oembed" target="_blank">Embedly's oEmbed API documentation</a> for more information on options and returned data.
				
				h5 Schema
				p <code>exists</code> <code class="data-type">Boolean</code>
				p <code>type</code> <code class="data-type">String</code>
				p <code>title</code> <code class="data-type">String</code>
				p <code>url</code> <code class="data-type">String</code>
				p <code>width</code> <code class="data-type">Number</code>
				p <code>height</code> <code class="data-type">Number</code>
				p <code>version</code> <code class="data-type">String</code>
				p <code>description</code> <code class="data-type">String</code>
				p <code>html</code> <code class="data-type">String</code>
				p <code>authorName</code> <code class="data-type">String</code>
				p <code>authorUrl</code> <code class="data-type">String</code>
				p <code>providerName</code> <code class="data-type">String</code>
				p <code>providerUrl</code> <code class="data-type">String</code>
				p <code>thumbnailUrl</code> <code class="data-type">String</code>
				p <code>thumbnailWidth</code> <code class="data-type">Number</code>
				p <code>thumbnailHeight</code> <code class="data-type">Number</code>
			
			h2 More examples
			p See the <a href="/examples">Examples</a> page for projects that demonstrate real-world usage of the various list options and field types.
