extends ../../../templates/layout/base

include ../../../templates/mixins/docsnav
	
block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			h2 Fields
			
			a(name='fields_overview')
			h3 Overview
			
			p When adding <strong>fields</strong> to <strong>Lists</strong>, you can either specify basic data types or Keystone Field Types.
			
			p <strong>Keystone Fields</strong> allow you to easily add rich, functional fields to your application's models. They are designed to describe not just the <em>structure</em> of your data, but also the <em>intention</em> of your data. They provide:
			ul
				li Rich controls in Keystone's Admin UI
				li Complex data types; e.g. the <code>location</code> field stores several strings and an GeoJSON lng/lat point
				li Formatting and validation methods
				li Additional virtual properties; e.g. the <code>name</code> field provides a <code>name.full</code> virtual which concatenates the stored <code>name.first</code> and <code>name.last</code>
				li Underscore methods; e.g. the <code>password</code> field provides a <code>password.compare</code> method for testing against the encrypted hash
				li Metadata about how fields relate to each other; e.g. which fields depend on certain values in other fields
			
			p Basic data types are mapped to their corresponding Keystone field types:
			
			table.table(style="width:200px")
				col
				col
				thead
					th Data type
					th Field type
				tr
					td: code.data-type String
					td: code.data-type Text
				tr
					td: code.data-type Number
					td: code.data-type Number
				tr
					td: code.data-type Date
					td: code.data-type DateTime
				tr
					td: code.data-type Boolean
					td: code.data-type Boolean
			
			a(name='fields_options')
			h3 Field Options
			
			p All field types support several common options, which can specify database settings (such as <code>index</code> and <code>default</code>), or can provide information for Keystone's Admin UI (such as <code>label</code>).
			
			p.note Fields can be nested inside objects, as in mongoose schemas.
			
			p.note All <a href="http://mongoosejs.com/docs/schematypes.html" target="_blank">mongoose schema type options</a> are passed to the <a href="http://mongoosejs.com/docs/guide.html" target="_blank">mongoose schema</a>, so you can also use any options mongoose supports.
			
			p Common field options include:
			
			table.table
				col(width=210)
				col
				tr
					td <code>label</code> <code class="data-type">String</code>
					td The label of each field is generated from the field path; set this option to override the default.
				tr
					td <code>required</code> <code class="data-type">Boolean</code>
					td Validates that the field has a value before an item can be saved (<em>also passed to mongoose and enforced using a database index</em>).
				tr
					td <code>initial</code> <code class="data-type">Boolean</code>
					td Causes the field to be displayed in the <strong>Create Item</strong> form, in the Admin UI.
				tr
					td <code>noedit</code> <code class="data-type">Boolean</code>
					td Renders the field as read-only in the admin UI.
				tr
					td <code>note</code> <code class="data-type">String</code>
					td Is displayed with the field in the admin UI.
				tr
					td <code>collapse</code> <code class="data-type">Boolean</code>
					td Displays an <strong>+ <u>add</u></strong> link in the admin UI when the field has no value. Will completely hide field UI when <code>noedit</code> is also set to true, when the field has no value.
				tr
					td <code>dependsOn</code> <code class="data-type">Object</code>
					td Hides the field in the admin UI unless the specified conditions (other field values) are met.
			
			//- TODO: Documentation for field methods
			
			a(name="fields_underscoremethods")
			h3 Underscore Methods
			
			p Some field types include helpful <strong>underscore methods</strong>, which are available on the item at the field's path preceded by an underscore.
			p <strong>For example</strong>: use the <code>format</code> underscore method of the <code>createdAt</code> <code class="data-type">DateTime</code> field of the Posts List (above) like this
			
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Post = keystone.list('Post');
				| 
				| Post.model.findById(postId).exec(function(err, post) {
				|    console.log(post._.createdAt.format('Do MMMM YYYY')); // 25th August 2013
				| });
