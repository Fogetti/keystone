extends ../layout/base

block content
	.container: .row
		
		.col-sm-3: #docs-sidebar
			ul.sidebar-nav
				li.nav-label KeystoneJS Guide
				li: a(href='#start_intro') Introduction
				li: a(href='#start_prereqs') Prerequisites
				li.nav-label Getting Started
				li: a(href='#start_newproj') Starting a new project
				li: a(href='#start_more') More information
				li: a(href='#start_structure') Project Structure
				li.nav-label Authentication
				li: a(href='#auth_users') Users Model
				li: a(href='#auth_session') Authentication and Session Management
				li: a(href='#auth_more') More information
				li.nav-label Routes &amp; Views
				li: a(href='#auth_users') Setting up your Routes
				li: a(href='#auth_session') Your first View
				li: a(href='#auth_more') More information
		
		.col-sm-9: #docs-content
			
			h1 KeystoneJS Guide
			
			h2 Introduction
			
			p KeystoneJS makes it easy to build batabase-driven websites, applications and APIs in node.js.
			p Under the hood, KeystoneJS uses the <a href="http://expressjs.com" target="_blank">express.js</a> web server framework, and a <a href="http://mongodb.com" target="_blank">MongoDB</a> database via the <a href="mongoosejs.com" target="_blank">mongoose</a> object modelling framework.
			
			.contextual-note
				h4 Simple vs. Flexible
				p Keystone is designed to make complicated things simple, without limiting the power or flexibility of node.js or the frameworks it is built on.
				p This guide will show you how to build a KeystoneJS website using the default project structure and options.
				p To learn more about how things work under the hood, and how you can extend or replace features, we strongly recommend reading the <a href="https://github.com/JedWatson/keystone" target="_blank">source code</a>.
			
			h3 Prerequisites
			
			p Before you begin, make sure you have <a href="http://nodejs.org/download" target="_blank">node.js</a> and <a href="http://www.mongodb.org/downloads" target="_blank">MongoDB</a> installed.
			
			//- .contextual-note
			//- 	h4 Got a mac? install Xcode.
			//- 	p If you've just installed node.js on your mac, you'll need to make sure you've got the Xcode command line tools installed, or you'll run into problems. Xcode is used to build modules that include native code in them.
			//- 	p The simplest way is to install Xcode form the App Store, and run it (you'll need to agree to the licence agreement).
			//- 	p If you're running a version of OS X earlier than Mavericks, you'll also need to open preferences, go to the downloads tab, and install the Xcode Command Line Tools.
			
			p You'll need a reasonable working knowledge of Javascript to use KeystoneJS, as well as familarity with basics such as database concepts, and using node / npm etc.
			p In the guide we'll also be using <a href="http://jade-lang.com" target="_blank">Jade</a> for our view templates and <a href="http://lesscss.org" target="_blank">LESS</a> for our CSS templates.
			
			h2 Getting Started
			
			h3 Starting a new project
			
			p Create a new directory for your project, then add the following two files, which are responsible for setting up your project and starting your webserver.
			
			.code-header
				h4 package.json
				p This file describes our project for npm, including the fact that it depends on <code>keystone</code>.
			pre
				| {
				|   "name": "my-project",
				|   "version": "0.0.1",
				|   "private": true,
				|   "dependencies": {
				|     "keystone": "latest"
				|   },
				|   "engines": {
				|     "node": "0.10.x",
				|     "npm": "1.3.x"
				|   },
				|   "scripts": {
				|     "start": "web.js"
				|   }
				| }
			
			.code-header
				h4 web.js
				p This is the script that will run our keystone website.
			pre
				| var keystone = require('keystone');
				| keystone.init({
				|   
				|   'name': 'My Project',
				|   
				|   'favicon': 'public/favicon.ico',
				|   'less': 'public',
				|   'static': 'public',
				|   
				|   'views': 'templates/views',
				|   'view engine': 'jade',
				|   
				|   'auto update': true,
				|   'mongo': 'mongodb://localhost/my-project',
				|   
				|   'session': true,
				|   'auth': true,
				|   'user model': 'User',
				|   'cookie secret': '(your secret here)'
				|   
				| });
				| 
				| require('./models');
				| 
				| keystone.set('routes', require('./routes'));
				| 
				| keystone.start();
			
			p Now run <code>npm install</code> to install keystone.
			p.note Note: your web script won't run yet, because it is including models and routes that have not been set up yet. It assumes you follow the conventions in this guide.
			
			.contextual-note
				h4 BYO Express and Mongoose
				p If you want to require Express or Mongoose in your application, insted of having Keystone provide and configure them completely, you can so do.
				p Include them in the dependencies list for your project, then provide them to Keystone using the <code>connect</code> method.
				pre
					| var express = require('express'),
					|     mongoose = require('mongoose'),
					|     app = express(),
					|     keystone = require('keystone').connect(mongoose, app);
			
			h3 More information
			
			p Full documentation on the options supported by Keystone can be found below.
			
			h3 Project Structure
			
			p With your package and web scripts in place, it's time to scaffold out containers for the rest of your app. Create the following directory structure:

			pre
				| |--lib
				| |  <span>Custom libraries and other code</span>
				| |--models
				| |  <span>Your application's database models</span>
				| |--public
				| |  <span>Static files (css, js, images, etc.) that are publicly available</span>
				| |--routes
				| |  |--api
				| |  |  <span>Your application's api controllers</span>
				| |  |--views
				| |  |  <span>Your application's view controllers</span>
				| |  |--index.js
				| |  |  <span>Initialises your application's routes and views</span>
				| |  |--middleware.js
				| |  |  <span>Custom middleware for your routes</span>
				| |--templates
				| |  |--includes
				| |  |  <span>Common .jade includes go in here</span>
				| |  |--layouts
				| |  |  <span>Base .jade layouts go in here</span>
				| |  |--mixins
				| |  |  <span>Common .jade mixins go in here</span>
				| |  |--views
				| |  |  <span>Your application's view templates</span>
				| |--updates
				| |  <span>Data population and migration scripts</span>
				| |--package.json
				| |  <span>Project configuration for npm</span>
				| |--web.js
				| |  <span>Main script that starts your application</span>
			
			p We also recommend that your application will be simpler to build and maintain if you mirror the internal structure of your <code>routes/views</code> and <code>templates/views</code> directories as much as possible.
			
			.contextual-note
				h4 Structure
				p.note This guide assumes you follow the recommendations above, however Keystone doesn't actually enforce any structure, so you're free to make changes to suit your application better.
			
			h2 Models
			
			p Before you can start your Keystone app, you'll need some data models.
			
			p We're going to start with the <code>User</code> model, which is special - we need it so that Keystone can do authentication and session management.
			
			p Create the following two files in the <code>/models</code> folder:
			
			.code-header
				h4 models/index.js
				p This is the script that includes your models. It doesn't need to export anything.
			pre
				| require('./users.js');
			
			.code-header
				h4 models/users.js
				p This script initialises the <code>User</code> model. It doesn't need to export anything, but the model <em>must</em> be registered with Keystone.
			pre
				| var keystone = require('keystone'),
				|     Types = keystone.Field.Types;
				| 
				| var User = new keystone.List('User');
				| 
				| User.add({
				|     name: { type: Types.Name, required: true, index: true },
				|     email: { type: Types.Email, initial: true, required: true, index: true },
				|     password: { type: Types.Password, initial: true, required: false },
				|     canAccessKeystone: { type: Boolean }
				| });
				| 
				| User.register();
			
			h3 Authentication and Session Management
			
			p For Keystone to provide authentication and session management to your application, it needs to know a few things, which we've now told it.
			
			p To recap:
			ul.list
				li The option <code>user model</code> must be the name of the Model that Keystone should look in to find your users. If you use a different model name, be sure to set the option correctly.
				li If you want your application to support session management, set the <code>session</code> option to <strong>true</strong>. The Admin UI will always have session management, but it incurs a small overhead, so if your application doesn't neet it you can turn it off.
				li Keystone has built-in views for signing in and out. To enable them, set the <code>auth</code> option to <strong>true</strong>. You can also implement custom signin and signout screens in your applications' views.
				li Sessions are persisted using an encrypted cookie storing the user's ID. Make sure you set the <code>cookie secret</code> option to a long, random string.
				li The user model must have a <code>canAccessKeystone</code> property (which can be a virtual method or a stored boolean) that says whether a user can access Keystone's Admin UI or not.
			
			h3 More information
			
			p For more information on how to set up your application's models, and the options for lists and fields, see the <a href="/guide/data">Database guide</a>.

			
			
			
			
			
