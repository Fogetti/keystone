extends ../../../templates/layout/base

include ../../../templates/mixins/docsnav

block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			h2 Advanced
			
			a(name='updates')
			h3 Application Updates
			
			p Keystone includes an updates framework, which you can enable by setting the <code>auto update</code> option to <code class="default-value">true</code>.
			
			p Updates provide an easy way to seed your database, transition data when your models change, or run transformation scripts against your database.
			
			p Update files should be named using a semantic version followed by an optional key, like <code>0.0.1-init.js</code>. The version numbers are used to order the update scripts correctly, while the keys are a nice way to identify what each update does.
			
			p Each update file should export a single function, which should accept a single argument - the <code>next(err)</code> callback, to be called when the update is complete.
			
			p All the update files will be executed (each one waits for the previous update to complete) before the web server is started.
			
			p If the <code>next</code> callback is receives an error it will be reported to the console, and application initialisation will halt.
			
			p You can temporarily disable updates from running in development by setting a <code>__defer__</code> property on the exported function to <code>true</code>. Any subsequent updates will be skipped, but the application will be started.
			
			p Updates are only run once, and each completed update is logged in an <code>app_updates</code> collection in your database.
			
			.code-header
				h4 Update Script Example
				p Creates a new admin User
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     User = keystone.list('User');
				| 
				| exports = module.exports = function(done) {
				|     new User.model({
				|         name: { first: 'Admin', last: 'User' },
				|         password: 'admin',
				|         isAdmin: true
				|     }).save(done);
				| };
			
			
			a(name='headless')
			h3 Disabling the Admin UI
			
			p You can disable the Admin UI by setting the <code>headless</code> option to <code class="default-value">false</code>.
			
			p This will allow you to use <code>keystone.start()</code> or <code>keystone.routes(app)</code> without Keystone creating route bindings for the Admin UI routes under <code class="default-value">/keystone</code>.