extends ../layout/base

block content
	.container: .alerts
		.alert.alert-success The KeystoneJS docs are in beta. For updates, please follow @keystonejs on twitter!
	
	.container: .row
		
		.col-sm-3: #docs-sidebar
			ul.sidebar-nav
				li.nav-label Keystone Options
				li: a(href='#concepts') Setting Options
				li: a(href='#project') Project Options
				li: a(href='#server') Web Server Options
				li: a(href='#database') Database and User Auth Options
				li.nav-label Emails
				li: a(href='#emails')
				li.nav-label Services
				li: a(href='#cloudinary') Cloudinary
				li: a(href='#google') Google Maps
				li: a(href='#embedly') Embed.ly
				li.nav-label More
				li: a(href='#updates') Application Updates
				li: a(href='#headless') Disabling the Admin UI
		
		.col-sm-9: #docs-content
			
			a(name='concepts')
			h1 Keystone Options
			
			p The options for KeystoneJS cover a range of behaviours, from how the express app is configured, to enabling features and authentication options for integrated services.
			
			p There are three ways to set options:
			
			ul.options
				li Passing a <code>{ key: 'value' }</code> configuration <code class="data-type">Object</code> to the <code>keystone.init(options)</code> method
				li Calling <code>keystone.set('key', 'value')</code>
				li Setting environment variables which are picked up in `process.env`. Only some options support this (noted below).
			
			p If you want to keep secret keys and configuration out of your codebase (especially important for open source projects, or projects where not all developers should have access to production config settings) the <a href="https://npmjs.org/package/dotenv" target="_blank">dotenv</a> module makes this very easy to manage.
			
			a(name='project')
			h2 Project Options
			
			p The following options control the branding and navigation of the KeystoneJS application in the Admin UI:
			
			table.table
				col(width=210)
				col
				tr
					td <code>name</code> <code class="data-type">String</code>
					td The name of the KeystoneJS application
				tr
					td <code>brand</code> <code class="data-type">String</code>
					td Displayed in the top left hand corner of the Admin UI
				tr
					td <code>nav</code> <code class="data-type">Object</code>
					td 
						p An object that specifies the navigation structure for the Admin UI. Create a key for each section that should be visible in the primary navigation. Each key's value can be a single list path (as is seen in the URL when you view a list) or an array of list paths. When an array is used, secondary navigation is rendered in the Admin UI.
						p The nav is also used to generate the links on the Admin UI home page; any lists that are registered but not including in the <code>nav</code> will be grouped at the bottom of the screen under the 'Other' heading.
			
			.code-header
				h4 Custom Navigation Example
				p If you had User, Post and PostCategory models, you could group the posts and post categories into a 'Content' navigation item like this:
			pre: code.language-javascript
				| keystone.set('nav', {
				|     'users': 'users',
				|     'content': ['posts', 'post-categories']
				| });
		
			a(name='server')
			h2 Web Server Options
			
			p The following options control the configuration of your web server and the express app:
			
			table.table
				col(width=210)
				col
				tr
					td <code>env</code> <code class="data-type">String</code>
					td
						p The environment setting to use. The keys <strong>development</strong> and <strong>production</strong> are supported, and this will have an impact on things like caching compiled templates. Defaults to <code class="default-value">process.env.NODE_ENV || "development"</code>.
						p It's strongly recommended you set this to 'production' for your production servers using the <code>NODE_ENV</code> environment variable, as several other modules also expect this convention.
				tr
					td <code>port</code> <code class="data-type">Number</code>
					td
						p The port to listen for request on. Defaults to <code class="default-value">process.env.PORT || 3000</code>
				tr
					td <code>views</code> <code class="data-type">String</code>
					td
						p The path to your application's <strong>view templates</strong>. This is required for using the <code>keystone.View</code> Class, and will also be set on the express app.
						p If you're following the <a href="/guide#start_structure">recommended project structure</a>, this should be set to <code class="default-value">"/templates/views"</code>.
				tr
					td <code>view engine</code> <code class="data-type">String</code>
					td
						p The template engine to use by default. Any engine with express support should work. <strong>Jade</strong> is included with Keystone, but you will have to add any alternate engine to your project's dependencies in your <code>package.json</code>.
						p This option is set on the express app (<a href="http://expressjs.com/api.html#app.engine" target="_blank">see docs here</a>).
				tr
					td <code>locals</code> <code class="data-type">Object</code>
					td
						p The default local variables to pass to your view templates.
						p Routes can extend or change local variables by modifying <code>res.locals</code>.
				tr
					td <code>static</code> <code class="data-type">String</code>
					td
						p The path to your application's static files. Setting this will include the <code>express.static</code> middleware.
						p If you're following the <a href="/guide#start_structure">recommended project structure</a>, this should be set to <code class="default-value">"/public"</code>.
				tr
					td <code>less</code> <code class="data-type">String</code>
					td
						p If you want Keystone to automatically compile <strong>.less</strong> files into <strong>.css</strong> files, set this value to the same path as the <code>static</code> option.
						p When this option is set, any requests to a <strong>.css</strong> or <strong>.min.css</strong> file will first check for a <strong>.less</strong> file with the same name, and if one is found, the css file will be regenerated.
				tr
					td <code>favicon</code> <code class="data-type">String</code>
					td
						p The path to your application's <strong>favicon</strong>. Setting this will include the <code>express.favicon</code> middleware. Should be relative to your project's root.
						p If you're following the <a href="/guide#start_structure">recommended project structure</a>, this should be set to <code class="default-value">"/public/favicon.ico"</code>.
				tr
					td <code>compress</code> <code class="data-type">Boolean</code>
					td Set this to <code class="default-value">true</code> to enable HTTP compression. This will include the <code>express.compress</code> middleware (<a href="http://expressjs.com/api.html#compress" target="_blank">see docs here</a>).
				tr
					td <code>logger</code> <code class="data-type">String</code>
					td Set this to include the <code>express.logger</code> middleware. The value will be passed to the middleware initialisation (<a href="http://www.senchalabs.org/connect/logger.html" target="_blank">see docs here</a>).
			
			
			a(name='database')
			h2 Database and User Auth Options
			
			p The following options control your database configuration and user models / authentication:
			
			table.table
				col(width=210)
				col
				tr
					td <code>mongo</code> <code class="data-type">String</code>
					td
						p The url for your MongoDB connection.
						p You should typically set this to <code class="default-value">"mongodb://localhost/your-db" || process.env.MONGO_URI</code>
				tr
					td <code>auth</code> <code class="data-type">Mixed</code>
					td
						p Whether to enable built-in auth for Keystone's Admin UI, or a custom function to use to authenticate users.
						p When this is set to <code class="default-value">false</code> (or not defined), Keystone's Admin UI will be open to the public (so set it!)
						p If using a custom function, it should follow the standard for express middleware of <code>function(req, res, next)</code>. If a user is not logged in or should not access Keystone's Admin UI, use <code>res.redirect()</code> to redirect them - otherwise call the <code>next</code> callback to enable access.
				tr
					td <code>user model</code> <code class="data-type">String</code>
					td
						p The key of the Keystone List for users, <strong>required</strong> if <code>auth</code> is set to <code class="default-value">true</code>
						p Typically this would be set to <code class="default-value">User</code>.
				tr
					td <code>cookie secret</code> <code class="data-type">String</code>
					td
						p The encryption key to use for your cookies. Passed to Express's cookie parser.
						p It's a really good idea to set this to a long, random string.
				tr
					td <code>signout</code> <code class="data-type">String</code>
					td
						p <code>href</code> for the signout link in the top right of the UI
						p Defaults to <code class="default-value">/keystone/signout</code> if <code>auth</code> is set to <code class="default-value">true</code>
			
			p For a walk-through of how to set these options up, see the <a href="/guide#models_auth">getting started guide</a>/
			
			p For more information about setting up and using database models with Keystone, see the <a href="/guide/data">database guide</a>.
			
			
			a(name='emails')
			h2 Emails
			
			p ...
			
			
			h2 Services
			
			a(name='cloudinary')
			h3 Cloudinary
			
			p ...
			
			
			a(name='google')
			h3 Google Maps
			
			p ...
			
			
			a(name='embedly')
			h3 Embed.ly
			
			p <a href="http://embed.ly" target="_blank">Embed.ly</a> is a service that will parse a url (e.g. Youtube embed link) and return a whole lot of useful information, like the provider name, summary metadata, width and height of videos, as well as a clean link to use for embedding media in your views. They offer a free plan for up to 5,000 urls per month.
			
			p The <a href="/guide/data#field_embedly">Embedly field type</a> is an easy way to integrate their API with your KeystoneJS app.
			
			p To configure KeystoneJS to support the Embed.ly API, simply <a href="https://app.embed.ly/signup">sign up for an account</a>, get your api key, and set the <code>embedly api key</code> option.
			
			p This option will default to the <code class="default-value">EMBEDLY_API_KEY</code> environment variable if it is set.
			
			pre: code.language-javascript
				| keystone.set('embedly api key', 'your-key');
			
			
			h2 Error Handling
			
			a(name='404s')
			h3 <code>404</code> (not found) errors
			
			//-  path to your 404 view template, or a function to handle 404s (standard Express signature of `function(req, res)`)
			
			a(name='500s')
			h3 <code>500</code> (server error) errors
			
			
			
			a(name='updates')
			h2 Application Updates
			
			p Keystone includes an updates framework, which you can enable by setting the <code>auto update</code> option to <code class="default-value">true</code>.
			
			p Updates provide an easy way to seed your database, transition data when your models change, or run transformation scripts against your database.
			
			p Update files should be named using a semantic version followed by an optional key, like <code>0.0.1-init.js</code>. The version numbers are used to order the update scripts correctly, while the keys are a nice way to identify what each update does.
			
			p Each update file should export a single function, which should accept a single argument - the <code>next(err)</code> callback, to be called when the update is complete.
			
			p All the update files will be executed (each one waits for the previous update to complete) before the web server is started.
			
			p If the <code>next</code> callback is receives an error it will be reported to the console, and application initialisation will halt.
			
			p You can temporarily disable updates from running in development by setting a <code>__defer__</code> property on the exported function to <code>true</code>. Any subsequent updates will be skipped, but the application will be started.
			
			p Updates are only run once, and each completed update is logged in an <code>app_updates</code> collection in your database.
			
			.code-header
				h4 Update Script Example
				p Creates a new admin User
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     User = keystone.list('User');
				| 
				| exports = module.exports = function(done) {
				|     new User.model({
				|         name: { first: 'Admin', last: 'User' },
				|         password: 'admin',
				|         isAdmin: true
				|     }).save(done);
				| };
			
			
			a(name='headless')
			h2 Disabling the Admin UI
			
			p You can disable the Admin UI by setting the <code>headless</code> option to <code class="default-value">false</code>.
			
			p This will allow you to use <code>keystone.start()</code> or <code>keystone.routes(app)</code> without Keystone creating route bindings for the Admin UI routes under <code class="default-value">/keystone</code>.
			

//- TODO:

//- *	`emails` - the path of your email templates, for use with the `keystone.Email` Class
//- *	`email locals` - 
//- *	`email tests` - 
//- *	`mandrill api key` - your mandrill API key to use with the `keystone.Email` Class
//- *	`email rules` - find & replace rules for pre-parsing email templates, useful to help with local vs. production absolute paths for images

//- *	`cloudinary config` `{cloud_name: '', api_key: '', api_secret: ''}` - alternatively set `process.env.CLOUDINARY_URL`
//- *	`cloudinary prefix` - prefix for all native tags added to uploaded images
//- *	`google api key` - API key to use for `google maps` fields
//- *	`default region` - This parameter takes a region code, specified as a [IANA language region](http://www.iana.org/assignments/language-subtag-registry/language-//- subtag-registry) subtag.
